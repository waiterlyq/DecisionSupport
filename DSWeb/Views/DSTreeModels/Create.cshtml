@model DSWeb.Models.DSTreeModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>

    <meta name="viewport" content="width=device-width" />
    <title>新增</title>

    <script type="text/javascript" src="~/Scripts/jquery-3.1.1.min.js"></script>
    <script type="text/javascript" src="~/Scripts/bootstrap.min.js"></script>
    <script type="text/javascript" src="~/Scripts/fileinput.min.js"></script>
    <script type="text/javascript" src="~/Scripts/Inputfilezh.js"></script>
    <script type="text/javascript" src="~/Scripts/bootstrapValidator.min.js"></script>
    <script type="text/javascript" src="~/Scripts/bootstrap-select.min.js"></script>
    <link href="~/Content/bootstrap-theme.min.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/bootstrap-fileinput/css/fileinput.min.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/bootstrapValidator.min.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/bootstrap-select.min.css" rel="stylesheet" type="text/css" />
    <script>
        $(function () {

            var oButtonInit = new ButtonInit();
            var oValidator = new ValidatorInit();
            oButtonInit.Init();
            oValidator.Init();
            initFileInput("FileData", "UpLoader?ModGUID=" + '@Model.ModGUID');
            fileShowHide();

        });
        var ValidatorInit = function () {
            var oValidator = new Object();
            ///初始化表单校验
            oValidator.Init = function () {
                $('form').bootstrapValidator({
                    message: 'This value is not valid',
                    feedbackIcons: {
                        valid: 'glyphicon glyphicon-ok',
                        invalid: 'glyphicon glyphicon-remove',
                        validating: 'glyphicon glyphicon-refresh'
                    },
                    fields: {
                        ModName: {
                            message: '模型名称不能为空',
                            validators: {
                                notEmpty: {
                                    message: '模型名称不能为空'
                                }
                            }
                        }
                    }
                });
            }
            return oValidator;
        }

        ///显示隐藏文件上传控件
        function fileShowHide() {
            if ($("input[name='IsFileDataSource']:checked").val() == 1) {
                $("#ModFileL").show(300);
                $("#ModFileI").show(300);
                $("#ModDB").hide(300);
                $("#ModCycle").hide(300);
                $("#btnTestDb").hide();
            }
            else {
                $("#ModFileL").hide(300);
                $("#ModFileI").hide(300);
                $("#ModDB").show(300);
                $("#ModCycle").show(300);
                $("#btnTestDb").show();
            }
        }


        //初始化fileinput控件（第一次初始化）
        function initFileInput(ctrlName, uploadUrl) {
            var control = $('#' + ctrlName);
            control.fileinput({
                language: 'zh', //设置语言
                uploadAsync: true,
                enctype: 'multipart/form-data',
                uploadUrl: uploadUrl, //上传的地址
                allowedFileExtensions: ['csv', 'xlsx', 'xls'],//接收的文件后缀
                showUpload: false, //是否显示上传按钮
                showCaption: true,//是否显示标题
                showPreview: false,
                dropZoneEnabled: false,
                showRemove: false,
                maxFileCount: 1,
                minFileCount: 1,
                msgErrorClass: 'file-error-message',
                msgValidationErrorClass: 'text-danger',
                dropZoneTitle: "拖拽文件到这里 &hellip;",
                browseClass: "btn btn-primary" //按钮样式
            }).on("filebatchselected", function (event, files) {
                $(this).fileinput("upload");
            }).on("fileuploaded", function (event, data, previewId, index) {
                var oSelectInit = new SelectInit();
                oSelectInit.Init();
            });;
        }

        var SelectInit = function () {
            var oInit = new Object();
            oInit.Init = function () {
                alert(0);
                var dbs = {
                    ModServer: $('#ModServer').val(),
                    ModDataBase: $('#ModDataBase').val(),
                    ModUid: $('#ModUid').val(),
                    ModPassword: $('#ModPassword').val(),
                    ModDataSource: $('#ModDataSource').val()
                };
                $("#resultSelector").find("option").remove();
                $.ajax({
                    type: "post",
                    url: '/DSTreeModels/GetFieldName',
                    data: { ModGUID: '@Model.ModGUID', isFile: $("input[name='IsFileDataSource']:checked").val(), ModDataSource: JSON.stringify(dbs) },
                    success: function (data) {
                        var json = eval(data); //数组
                        $.each(json, function (index, item) {
                            $("#resultSelector").append("<option value='" + json[index].FieldName + "'>" + json[index].FieldName + "</option>");
                        });


                    },
                    error: function () {

                    },
                    complete: function () {

                    }

                });

            }
            return oInit;
        }

        var ButtonInit = function () {
            var oInit = new Object();

            oInit.Init = function () {
                $("#btnTestDb").click(function () {
                    var Server = $("#ModServer").val();
                    var DataBase = $("#ModDataBase").val();
                    var Uid = $("#ModUid").val();
                    var PassWord = $("#ModPassword").val();
                    if (Server == "") {
                        alert("请填写服务器！");
                        return;
                    }
                    if (DataBase == "") {
                        alert("请填写数据库！");
                        return;
                    }
                    if (Uid == "") {
                        alert("请填写登录名！");
                        return;
                    }
                    $.ajax({
                        type: "post",
                        url: "/DSTreeModels/CheckDbString",
                        data: { Server: Server, DataBase: DataBase, Uid: Uid, PassWord: PassWord },
                        success: function (data) {
                            if (data == "success") {
                                alert("数据库连接验证成功！");
                            }
                            if (data == "failure") {
                                alert("数据库连接验证失败！");
                            }
                        },
                        error: function () {
                            alert("数据库连接验证失败！");
                        },
                        complete: function () {

                        }

                    });
                });
                $("input[name='IsFileDataSource']").change(function () {
                    fileShowHide();
                });
            }
            return oInit;
        };
    </script>
</head>
<body>
    <div class="modal-header">
        <h3>新增模型</h3>
    </div>
    <form>
        @Html.AntiForgeryToken()
        <div class="modal-body">
            <div id="ModMain" class="form-horizontal">
                <fieldset>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.EditorFor(model => model.ModName, new { htmlAttributes = new { @class = "form-control input-sm" } })
                        </div>
                        @Html.LabelFor(model => model.IsFileDataSource, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-4">
                            @Html.RadioButtonFor(model => model.IsFileDataSource, 1, htmlAttributes: new { @checked = "true" })是
                            @Html.RadioButtonFor(model => model.IsFileDataSource, 0)否
                        </div>
                    </div>
                    <div class="form-group text-center">
                        <div id="ModFileL" class="col-md-2 text-right">
                            <label class="control-label">上传文件</label>
                        </div>
                        <div id="ModFileI" class="col-md-4" style="padding-bottom:20px;text-align:center">
                            <input id="FileData" class="input-sm" name="FileData" type="file" />
                        </div>
                        <div class="col-md-2 text-right">
                            <label class="control-label">结果属性</label>
                        </div>
                        <div class="col-md-4">
                            <select id="resultSelector" class="form-control input-sm"></select>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModRemark, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.ModRemark, new { @class = "form-control", @rows = "6" })

                        </div>
                    </div>
                </fieldset>
            </div>
            <div id="ModDB" class="form-horizontal" hidden="hidden">
                <fieldset>
                    <legend>设置数据源</legend>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModServer, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModServer, new { htmlAttributes = new { @class = "form-control  input-sm" } })

                        </div>
                        @Html.LabelFor(model => model.ModDataBase, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModDataBase, new { htmlAttributes = new { @class = "form-control  input-sm" } })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModUid, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModUid, new { htmlAttributes = new { @class = "form-control  input-sm" } })

                        </div>
                        @Html.LabelFor(model => model.ModPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModPassword, new { htmlAttributes = new { @class = "form-control  input-sm", @type = "password" } })

                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModDataSource, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-lg-10">
                            @Html.TextAreaFor(model => model.ModDataSource, new { @class = "form-control  input-sm", @rows = "4" })
                        </div>
                    </div>
                </fieldset>
            </div>
            <div id="ModCycle" class="form-horizontal" hidden="hidden">
                <fieldset>
                    <legend>设置生成周期</legend>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModCycleType, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            <select id="ModCycleTypeSelector" class="form-control input-sm">
                                <option value="Month">月</option>
                                <option value="Week">周</option>
                                <option value="None">无</option>
                            </select>
                        </div>
                        @Html.LabelFor(model => model.ModCycleWD, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModCycleWD, new { htmlAttributes = new { @class = "form-control  input-sm" } })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModCycleDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModCycleDate, new { htmlAttributes = new { @class = "form-control  input-sm" } })
                        </div>
                    </div>
                </fieldset>
            </div>
            <div class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10 text-center">
                        <input id="btnTestDb" type="button" value="测试数据库连接" class="btn btn-default" />
                        <input id="save" type="submit" value="保存" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </div>
    </form>
    @*@using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                <fieldset>
                    <legend>新增模型</legend>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ModName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModCycleType, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModCycleType, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModCycleType, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.ModCycleWD, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModCycleWD, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModCycleWD, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.ModCycleDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModCycleDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModCycleDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </fieldset>
                <fieldset>
                    <legend>配置数据源</legend>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModServer, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModServer, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModServer, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.ModDataBase, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModDataBase, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModDataBase, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModUid, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModUid, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModUid, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.ModPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModPassword, new { htmlAttributes = new { @class = "form-control", @type = "password" } })
                            @Html.ValidationMessageFor(model => model.ModPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModDataSource, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-lg-10">
                            @Html.TextAreaFor(model => model.ModDataSource, new { @class = "form-control", @rows = "4" })
                            @Html.ValidationMessageFor(model => model.ModDataSource, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </fieldset>
                <div class="form-group">
                    @Html.LabelFor(model => model.ModRemark, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-lg-10">
                        @Html.TextAreaFor(model => model.ModRemark, new { @class = "form-control", @rows = "4" })
                        @Html.ValidationMessageFor(model => model.ModRemark, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-lg-10">

                        <input id="FileData" type="file" />
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="保存" class="btn btn-default" />
                        <input id="btnTestDb" type="button" value="测试数据库连接" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }*@
</body>
</html>
