@model DSWeb.Models.DSTreeModel
@{
    Layout = null;
}


<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <script type="text/javascript" src="~/Scripts/jquery-3.1.1.min.js"></script>
    <script type="text/javascript" src="~/scripts/bootstrap.min.js"></script>
    <link href="~/Content/bootstrap-theme.min.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <title>新增</title>
    <script>

        $(function () {

            var oButtonInit = new ButtonInit();
            oButtonInit.Init();

        });

        var ButtonInit = function () {
            var oInit = new Object();

            oInit.Init = function () {
                $("#btnTestDb").click(function () {
                    var Server = $("#ModServer").val();
                    var DataBase = $("#ModDataBase").val();
                    var Uid = $("#ModUid").val();
                    var PassWord = $("#ModPassword").val();
                    if (Server == "") {
                        alert("请填写服务器！");
                        return;
                    }
                    if (DataBase == "") {
                        alert("请填写数据库！");
                        return;
                    }
                    if (Uid == "") {
                        alert("请填写登录名！");
                        return;
                    }
                    $.ajax({
                        type: "post",
                        url: "/DSTreeModels/CheckDbString",
                        data: { Server: Server, DataBase: DataBase, Uid: Uid, PassWord: PassWord },
                        success: function (data) {
                            if (data == "success") {
                                alert("数据库连接验证成功！");
                            }
                            if (data == "failure") {
                                alert("数据库连接验证失败！");
                            }
                        },
                        error: function () {
                            alert("数据库连接验证失败！");
                        },
                        complete: function () {

                        }

                    });
                });
            }
            return oInit;
        };
    </script>
</head>
<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            <fieldset>
                <legend>新增模型</legend>
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.ModName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ModName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ModName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ModCycleType, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm-4">
                        @Html.EditorFor(model => model.ModCycleType, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ModCycleType, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.ModCycleWD, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm-4">
                        @Html.EditorFor(model => model.ModCycleWD, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ModCycleWD, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.ModCycleDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm-4">
                        @Html.EditorFor(model => model.ModCycleDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ModCycleDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </fieldset>
            <fieldset>
                <legend>配置数据源</legend>
                <div class="form-group">
                    @Html.LabelFor(model => model.ModServer, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm-4">
                        @Html.EditorFor(model => model.ModServer, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ModServer, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.ModDataBase, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm-4">
                        @Html.EditorFor(model => model.ModDataBase, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ModDataBase, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ModUid, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm-4">
                        @Html.EditorFor(model => model.ModUid, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ModUid, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(model => model.ModPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-sm-4">
                        @Html.EditorFor(model => model.ModPassword, new { htmlAttributes = new { @class = "form-control", @type = "password" } })
                        @Html.ValidationMessageFor(model => model.ModPassword, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ModDataSource, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-lg-10">
                        @Html.TextAreaFor(model => model.ModDataSource, new { @class = "form-control", @rows = "4" })
                        @Html.ValidationMessageFor(model => model.ModDataSource, "", new { @class = "text-danger" })
                    </div>
                </div>
            </fieldset>
            <div class="form-group">
                @Html.LabelFor(model => model.ModRemark, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-lg-10">
                    @Html.TextAreaFor(model => model.ModRemark, new { @class = "form-control", @rows = "4" })
                    @Html.ValidationMessageFor(model => model.ModRemark, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="保存" class="btn btn-default" />
                    <input id="btnTestDb" type="button" value="测试数据库连接" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
</body>
</html>
