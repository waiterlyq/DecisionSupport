@model IEnumerable<DSWeb.Models.DSTree>



<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
    <script src="~/Scripts/jquery.ztree.all-3.5.min.js"></script>
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <link href="~/Content/zTree.theme.metro.css" rel="stylesheet" />
    <style>
        .link {
            fill: none;
            stroke: #666;
            stroke-width: 1.5px;
        }

        #licensing {
            fill: green;
        }

        .link.licensing {
            stroke: green;
        }

        .link.resolved {
            stroke-dasharray: 0,2 1;
        }

        circle {
            fill: #ccc;
            stroke: #333;
            stroke-width: 1.5px;
        }

        text {
            font: 12px Microsoft YaHei;
            pointer-events: none;
            text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
        }

        .linetext {
            font-size: 12px Microsoft YaHei;
        }

        path {  stroke: #fff; }
        path:hover {  opacity:0.9; }
        rect:hover {  fill:blue; }
        .axis {  font: 10px sans-serif; }
        .legend tr{    border-bottom:1px solid grey; }
        .legend tr:first-child{    border-top:1px solid grey; }

        .axis path,
        .axis line {
          fill: none;
          stroke: #000;
          shape-rendering: crispEdges;
        }

        .x.axis path {  display: none; }
        .legend{
            margin-bottom:76px;
            display:inline-block;
            border-collapse: collapse;
            border-spacing: 0px;
        }
        .legend td{
            padding:4px 5px;
            vertical-align:bottom;
        }
        .legendFreq, .legendPerc{
            align:right;
            width:50px;
        }

    </style>
    <script type="text/javascript">
        var MyModGUID, MyModName;
        var MyType="Tree";
        function setFontCss(treeId, treeNode) {
            return treeNode.isLastResault == "1" ? { color: "red" } : {};
        };
        
        var setting = {
            view: {
                addHoverDom: false,
                removeHoverDom: false,
                selectedMulti: false,
                fontCss: setFontCss
            },
            check: {
                enable: false
            },
            data: {
                simpleData: {
                    enable: true
                }
            },
            edit: {
                enable: false
            },
            callback: {
                onClick: zTreeOnClick
            }
        };

        function zTreeOnClick(event, treeId, treeNode) {
            //debugger;
            $("#pie").empty();
            $("#Gram").empty();
            $.ajax({
                async: false,
                type: "POST",
                url: "DSTreeModels/GetModSelectPieJson",//注意路径
                data: { ID: treeNode.DSTreeGUID },
                dataType: "json",
                success: function (data) {
                    var fData = new Array();
                    fData.push({ type: "CoverCount", freq: data[0].CoverCount });
                    fData.push({ type: "ErrorCount", freq: data[0].ErrorCount });
                    createPie('#pie', fData);
                },
                error: function (data) {
                    alert("Error！");
                }
            });

            $.ajax({
                async: false,
                type: "POST",
                url: "DSTreeModels/GetModSelectGramJson",//注意路径
                data: { ID: treeNode.ModGUID },
                dataType: "json",
                success: function (data) {
                    //debugger;
                    //var fData = [
                    //    { State: 'AL', freq: { low: 4786, mid: 1319, high: 249 } }
                    //    , { State: 'AZ', freq: { low: 1101, mid: 412, high: 674 } }
                    //    , { State: 'CT', freq: { low: 932, mid: 2149, high: 418 } }
                    //    , { State: 'DE', freq: { low: 832, mid: 1152, high: 1862 } }
                    //    , { State: 'FL', freq: { low: 4481, mid: 3304, high: 948 } }
                    //    , { State: 'GA', freq: { low: 1619, mid: 167, high: 1063 } }
                    //    , { State: 'IA', freq: { low: 1819, mid: 247, high: 1203 } }
                    //    , { State: 'IL', freq: { low: 4498, mid: 3852, high: 942 } }
                    //    , { State: 'IN', freq: { low: 797, mid: 1849, high: 1534 } }
                    //    , { State: 'KS', freq: { low: 162, mid: 379, high: 471 } }
                    //];
                    var newData = new Array();
                    for (var i = 0; i < data.length; i++) {
                        newData.push([data[i].FactornameCn, data[i].Useage]);
                    }
                    createGram('#Gram', newData);
                },
                error: function (data) {
                    //debugger;
                    alert("Error！");
                }
            });
        };

        function createGram(id, fData) {
            var Colors = ["rgb(96,192,221)", "rgb(246,191,117)", "rgb(215,80,75)","rgb(155,202,99)"]
            function barColor(index) {
                return Colors[index];
            }
            function segColor(c) { return { CoverCount: "#807dba", ErrorCount: "#e08214", high: "#41ab5d" }[c]; }

            // compute total for each state.
            //fData.forEach(function (d) { d.total = d.freq.low + d.freq.mid + d.freq.high; });

            // function to handle histogram.
            function histoGram(fD) {
                var hG = {}, hGDim = { t: 60, r: 0, b: 30, l: 0 };
                hGDim.w = 500 - hGDim.l - hGDim.r,
                hGDim.h =150;

                //create svg for histogram.
                var hGsvg = d3.select(id).append("svg")
                    .attr("width", hGDim.w + hGDim.l + hGDim.r)
                    .attr("height", hGDim.h + hGDim.t + hGDim.b).append("g")
                    .attr("transform", "translate(" + hGDim.l + "," + hGDim.t + ")");

                // create function for x-axis mapping.
                var x = d3.scale.ordinal().rangeRoundBands([0, hGDim.w], 0.1)
                        .domain(fD.map(function (d) { return d[0]; }));

                // Add x-axis to the histogram svg.
                hGsvg.append("g").attr("class", "x axis")
                    .attr("transform", "translate(0," + hGDim.h + ")")
                    .call(d3.svg.axis().scale(x).orient("bottom"));

                // Create function for y-axis map.
                var y = d3.scale.linear().range([hGDim.h, 0])
                        .domain([0, d3.max(fD, function (d) { return d[1]; })]);

                // Create bars for histogram to contain rectangles and freq labels.
                var bars = hGsvg.selectAll(".bar").data(fD).enter()
                        .append("g").attr("class", "bar");

                //create the rectangles.
                bars.append("rect")
                    .attr("x", function (d) { return x(d[0]); })
                    .attr("y", function (d) { return y(d[1]); })
                    .attr("width", x.rangeBand())
                    .attr("height", function (d) { return hGDim.h - y(d[1]); })
                    .attr('fill', function (d) { return barColor(fD.indexOf(d)); })
                    .on("mouseover", mouseover)// mouseover is defined below.
                    .on("mouseout", mouseout);// mouseout is defined below.

                //Create the frequency labels above the rectangles.
                bars.append("text").text(function (d) { return d3.format(",")(d[1]) })
                    .attr("x", function (d) { return x(d[0]) + x.rangeBand() / 2; })
                    .attr("y", function (d) { return y(d[1]) - 5; })
                    .attr("text-anchor", "middle");

                function mouseover(d) {  // utility function to be called on mouseover.
                    // filter for selected state.
                    var st = fData.filter(function (s) { return s.State == d[0]; })[0],
                        nD = d3.keys(st.freq).map(function (s) { return { type: s, freq: st.freq[s] }; });

                    // call update functions of pie-chart and legend.    
                    pC.update(nD);
                    //leg.update(nD);
                }

                function mouseout(d) {    // utility function to be called on mouseout.
                    // reset the pie-chart and legend.    
                    pC.update(tF);
                    //leg.update(tF);
                }

                // create function to update the bars. This will be used by pie-chart.
                hG.update = function (nD, color) {
                    // update the domain of the y-axis map to reflect change in frequencies.
                    y.domain([0, d3.max(nD, function (d) { return d[1]; })]);

                    // Attach the new data to the bars.
                    var bars = hGsvg.selectAll(".bar").data(nD);

                    // transition the height and color of rectangles.
                    bars.select("rect").transition().duration(500)
                        .attr("y", function (d) { return y(d[1]); })
                        .attr("height", function (d) { return hGDim.h - y(d[1]); })
                        .attr("fill", color);

                    // transition the frequency labels location and change value.
                    bars.select("text").transition().duration(500)
                        .text(function (d) { return d3.format(",")(d[1]) })
                        .attr("y", function (d) { return y(d[1]) - 5; });
                }
                return hG;
            }

            // calculate total frequency by segment for all state.
            //var tF = ['low', 'mid', 'high'].map(function (d) {
            //    return { type: d, freq: d3.sum(fData.map(function (t) { return t.freq[d]; })) };
            //});

            //// calculate total frequency by state for all segment.
            //var sF = fData.map(function (d) { return [d.State, d.total]; });

            var hG = histoGram(fData); // create the histogram.
        }

        function createPie(id, fData) {
            var barColor = 'steelblue';
            function segColor(c) { return { CoverCount: "rgb(145,221,222)", ErrorCount: "rgb(215,235,205)", high: "#41ab5d" }[c]; }

            // compute total for each state.
            //fData.forEach(function (d) { d.total = d.freq.low + d.freq.mid + d.freq.high; });

            // function to handle pieChart.
            function pieChart(pD) {
                var pC = {}, pieDim = { w: 200, h: 200 };
                pieDim.r = Math.min(pieDim.w, pieDim.h) / 2;

                // create svg for pie chart.
                var piesvg = d3.select(id).append("svg")
                    .attr("width", pieDim.w).attr("height", pieDim.h).append("g")
                    .attr("transform", "translate(" + pieDim.w / 2 + "," + pieDim.h / 2 + ")");

                // create function to draw the arcs of the pie slices.
                var arc = d3.svg.arc().outerRadius(pieDim.r - 10).innerRadius(0);

                // create a function to compute the pie slice angles.
                var pie = d3.layout.pie().sort(null).value(function (d) { return d.freq; });

                // Draw the pie slices.
                piesvg.selectAll("path").data(pie(pD)).enter().append("path").attr("d", arc)
                    .each(function (d) { this._current = d; })
                    .style("fill", function (d) { return segColor(d.data.type); })
                    .on("mouseover", mouseover).on("mouseout", mouseout);

                // create function to update pie-chart. This will be used by histogram.
                pC.update = function (nD) {
                    piesvg.selectAll("path").data(pie(nD)).transition().duration(500)
                        .attrTween("d", arcTween);
                }
                // Utility function to be called on mouseover a pie slice.
                function mouseover(d) {
                    // call the update function of histogram with new data.
                    //hG.update(fData.map(function (v) {
                    //    return [v.State, v.freq[d.data.type]];
                    //}), segColor(d.data.type));
                }
                ////Utility function to be called on mouseout a pie slice.
                function mouseout(d) {
                    // call the update function of histogram with all data.
                    //hG.update(fData.map(function (v) {
                    //    return [v.State, v.total];
                    //}), barColor);
                }
                // Animating the pie-slice requiring a custom function which specifies
                // how the intermediate paths should be drawn.
                function arcTween(a) {
                    var i = d3.interpolate(this._current, a);
                    this._current = i(0);
                    return function (t) { return arc(i(t)); };
                }
                return pC;
            }

            // function to handle legend.
            function legend(lD) {
                var leg = {};

                var ShowName = { CoverCount: "覆盖数", ErrorCount: "错误数" };
                // create table for legend.
                var legend = d3.select(id).append("table").attr('class', 'legend');

                // create one row per segment.
                var tr = legend.append("tbody").selectAll("tr").data(lD).enter().append("tr");

                // create the first column for each segment.
                tr.append("td").append("svg").attr("width", '16').attr("height", '16').append("rect")
                    .attr("width", '16').attr("height", '16')
                    .attr("fill", function (d) { return segColor(d.type); });

                // create the second column for each segment.
                tr.append("td").attr("width", '100').attr("height", '16').text(function (d) { return eval("ShowName."+d.type); });

                // create the third column for each segment.
                tr.append("td").attr("width", '100').attr("height", '16').attr("class", 'legendFreq')
                    .text(function (d) { return d3.format(",")(d.freq); });

                // create the fourth column for each segment.
                tr.append("td").attr("width", '100').attr("height", '16').attr("class", 'legendPerc')
                    .text(function (d) { return getLegend(d, lD); });

                // Utility function to be used to update the legend.
                leg.update = function (nD) {
                    // update the data attached to the row elements.
                    var l = legend.select("tbody").selectAll("tr").data(nD);

                    // update the frequencies.
                    l.select(".legendFreq").text(function (d) { return d3.format(",")(d.freq); });

                    // update the percentage column.
                    l.select(".legendPerc").text(function (d) { return getLegend(d, nD); });
                }

                function getLegend(d, aD) { // Utility function to compute percentage.
                    return d3.format("%")(d.freq / d3.sum(aD.map(function (v) { return v.freq; })));
                }

                return leg;
            }

           
            var pC = pieChart(fData); // create the pie-chart.
            var leg = legend(fData);  // create the legend.
        }

        $(document).ready(function () {
            //var zNodes;
            initSelector();      
            //$("#ModSelector").change(function () { SettingChange(); });
            //$("input:radio[name='DisplayType']").change(function () { SettingChange(); })//拨通
               
            //SettingChange()
        });

        ///设置变换更新界面
        function SettingChange(type)
        {
            if (MyModGUID == "" || MyModGUID == null)
            {
                return;
            }
            MyType = type;
            if (type == "Tree") {
                initTable(MyModGUID, MyModName);
            }
            else {
                $("#DivDSTree").empty();
                initGraphic(MyModGUID,MyModName);
            }
           
        }

        function initGraphic(ModGUID,ModName)
        {
            //debugger;
            var links;

            $.ajax({
                async: false,
                type: "POST",
                url: "DSTrees/GetGraphicJson",//注意路径
                data: { ModGUID: ModGUID },
                dataType: "json",
                success: function (data) {
                    links = data;
                    $("#ModulSelectShow").html(ModName);
                },
                error: function (data) {
                    alert("模型尚未生成！");
                }
            })

            var nodes = {};

            links.forEach(function (link) {
                link.source = nodes[link.source] || (nodes[link.source] = { name: link.source });
                link.target = nodes[link.target] || (nodes[link.target] = { name: link.target });
            });

            var width = 800,
                height = 600;

            var force = d3.layout.force()//layout将json格式转化为力学图可用的格式
                .nodes(d3.values(nodes))//设定节点数组
                .links(links)//设定连线数组
                .size([width, height])//作用域的大小
                .linkDistance(180)//连接线长度
                .charge(-1500)//顶点的电荷数。该参数决定是排斥还是吸引，数值越小越互相排斥
                .on("tick", tick)//指时间间隔，隔一段时间刷新一次画面
                .start();//开始转换

            var svg = d3.select("#DivDSTree").append("svg")
                .attr("width", width)
                .attr("height", height);

            //箭头
            var marker =
                svg.append("marker")
                //.attr("id", function(d) { return d; })
                .attr("id", "resolved")
                //.attr("markerUnits","strokeWidth")//设置为strokeWidth箭头会随着线的粗细发生变化
                .attr("markerUnits", "userSpaceOnUse")
                .attr("viewBox", "0 -5 10 10")//坐标系的区域
                .attr("refX", 32)//箭头坐标
                .attr("refY", -1)
                .attr("markerWidth", 12)//标识的大小
                .attr("markerHeight", 12)
                .attr("orient", "auto")//绘制方向，可设定为：auto（自动确认方向）和 角度值
                .attr("stroke-width", 2)//箭头宽度
                .append("path")
                .attr("d", "M0,-5L10,0L0,5")//箭头的路径
                .attr('fill', '#000000');//箭头颜色

            /* 将连接线设置为曲线
            var path = svg.append("g").selectAll("path")
                .data(force.links())
                .enter().append("path")
                .attr("class", function(d) { return "link " + d.type; })
                .style("stroke",function(d){
                    //console.log(d);
                   return "#A254A2";//连接线的颜色
                })
                .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });
            */

            //设置连接线    
            var edges_line = svg.selectAll(".edgepath")
                .data(force.links())
                .enter()
                .append("path")
                .attr({
                    'd': function (d) { return 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y },
                    'class': 'edgepath',
                    //'fill-opacity':0,
                    //'stroke-opacity':0,
                    //'fill':'blue',
                    //'stroke':'red',
                    'id': function (d, i) { return 'edgepath' + i; }
                })
                .style("stroke", function (d) {
                    var lineColor;
                    //根据关系的不同设置线条颜色
                    if (d.rela == "上位产品" || d.rela == "上游" || d.rela == "下位产品") {
                        lineColor = "#A254A2";
                    } else if (d.rela == "主营产品") {
                        lineColor = "#B43232";
                    }
                    return lineColor;
                })
                .style("pointer-events", "none")
                .style("stroke-width", 0.5)//线条粗细
                .attr("marker-end", "url(#resolved)");//根据箭头标记的id号标记箭头

            var edges_text = svg.append("g").selectAll(".edgelabel")
            .data(force.links())
            .enter()
            .append("text")
            .style("pointer-events", "none")
            //.attr("class","linetext")
            .attr({
                'class': 'edgelabel',
                'id': function (d, i) { return 'edgepath' + i; },
                'dx': 80,
                'dy': 0
                //'font-size':10,
                //'fill':'#aaa'
            });

            //设置线条上的文字
            edges_text.append('textPath')
            .attr('xlink:href', function (d, i) { return '#edgepath' + i })
            .style("pointer-events", "none")
            .text(function (d) { return d.rela; });

            //圆圈
            var circle = svg.append("g").selectAll("circle")
                .data(force.nodes())//表示使用force.nodes数据
                .enter().append("circle")
                .style("fill", function (node) {
                    var color;//圆圈背景色
                    var link = links[node.index];
                    if (node.name == link.source.name && link.rela == "主营产品") {
                        color = "#F6E8E9";
                    } else {
                        color = "#F9EBF9";
                    }
                    return color;
                })
                .style('stroke', function (node) {
                    var color;//圆圈线条的颜色
                    var link = links[node.index];
                    if (node.name == link.source.name && link.rela == "主营产品") {
                        color = "#B43232";
                    } else {
                        color = "#A254A2";
                    }
                    return color;
                })
                .attr("r", 35)//设置圆圈半径
                .on("click", function (node) {
                    //单击时让连接线加粗
                    edges_line.style("stroke-width", function (line) {
                        console.log(line);
                        if (line.source.name == node.name || line.target.name == node.name) {
                            return 4;
                        } else {
                            return 0.5;
                        }
                    });
                    //d3.select(this).style('stroke-width',2);
                })
                .call(force.drag);//将当前选中的元素传到drag函数中，使顶点可以被拖动
            /*
             circle.append("text")  
            .attr("dy", ".35em")  
            .attr("text-anchor", "middle")//在圆圈内添加文字  
            .text(function(d) { 
                //console.log(d);
                return d.name; 
            }); */

            //圆圈的提示文字
            circle.append("svg:title")
                  .text(function (node) {
                      var link = links[node.index];
                      if (node.name == link.source.name && link.rela == "主营产品") {
                          return "双击可查看详情"
                      }
                  });
            /* 矩形
            var rect=svg.append("rect")
                     .attr({"x":100,"y":100,
                            "width":100,"height":50,
                            "rx":5,//水平圆角
                            "ry":10//竖直圆角
                         })
                      .style({
                         "stroke":"red",
                         "stroke-width":1,
                         "fill":"yellow"
            });*/
            var text = svg.append("g").selectAll("text")
                .data(force.nodes())
                //返回缺失元素的占位对象（placeholder），指向绑定的数据中比选定元素集多出的一部分元素。
                .enter()
                .append("text")
                .attr("dy", ".35em")
                .attr("text-anchor", "middle")//在圆圈中加上数据  
                .style('fill', function (node) {
                    var color;//文字颜色
                    var link = links[node.index];
                    if (node.name == link.source.name && link.rela == "主营产品") {
                        color = "#B43232";
                    } else {
                        color = "#A254A2";
                    }
                    return color;
                }).attr('x', function (d) {
                    // console.log(d.name+"---"+ d.name.length);
                    var re_en = /[a-zA-Z]+/g;
                    d3.select(this).append('tspan')
                       .attr('x', 0)
                       .attr('y', 2)
                       .text(function () {
                           return d.name.split("&")[0];
                       });
                    ////如果是全英文，不换行
                    //if (re_en.test(d.name) ){
                    //    d3.select(this).append('tspan')
                    //    .attr('x', 0)
                    //    .attr('y', 2)
                    //    .text(function () { return d.name; });
                    //}
                    //    //如果小于四个字符，不换行
                    //else if (d.name.length <= 4) {
                    //    d3.select(this).append('tspan')
                    //   .attr('x', 0)
                    //   .attr('y', 2)
                    //   .text(function () { return d.name; });
                    //} else {
                    //    d3.select(this).append('tspan')
                    //  .attr('x', 0)
                    //  .attr('y', 2)
                    //  .text(function () { return d.name; });
                    //    //var top = d.name.substring(0, 4);
                    //    //var bot = d.name.substring(4, d.name.length);

                    //    //d3.select(this).text(function () { return ''; });

                    //    //d3.select(this).append('tspan')
                    //    //    .attr('x', 0)
                    //    //    .attr('y', -7)
                    //    //    .text(function () { return top; });

                    //    //d3.select(this).append('tspan')
                    //    //    .attr('x', 0)
                    //    //    .attr('y', 10)
                    //    //    .text(function () { return bot; });
                    //}
                    //直接显示文字    
                    /*.text(function(d) { 
                    return d.name; */
                });

            /*  将文字显示在圆圈的外面 
            var text2 = svg.append("g").selectAll("text")
                 .data(force.links())
                //返回缺失元素的占位对象（placeholder），指向绑定的数据中比选定元素集多出的一部分元素。
                .enter()
                .append("text")
                .attr("x", 150)//设置文字坐标
                .attr("y", ".50em")
                .text(function(d) { 
                    //console.log(d);
                    //return d.name; 
                    //return d.rela;
                    console.log(d);
                    return  '1111';
                });*/

            function tick() {
                //path.attr("d", linkArc);//连接线
                circle.attr("transform", transform1);//圆圈
                text.attr("transform", transform2);//顶点文字
                //edges_text.attr("transform", transform3);
                //text2.attr("d", linkArc);//连接线文字
                //console.log("text2...................");
                //console.log(text2);
                //edges_line.attr("x1",function(d){ return d.source.x; });
                //edges_line.attr("y1",function(d){ return d.source.y; });
                //edges_line.attr("x2",function(d){ return d.target.x; });
                //edges_line.attr("y2",function(d){ return d.target.y; });

                //edges_line.attr("x",function(d){ return (d.source.x + d.target.x) / 2 ; });
                //edges_line.attr("y",function(d){ return (d.source.y + d.target.y) / 2 ; });


                edges_line.attr('d', function (d) {
                    var path = 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y;
                    return path;
                });

                edges_text.attr('transform', function (d, i) {
                    if (d.target.x < d.source.x) {
                        bbox = this.getBBox();
                        rx = bbox.x + bbox.width / 2;
                        ry = bbox.y + bbox.height / 2;
                        return 'rotate(180 ' + rx + ' ' + ry + ')';
                    }
                    else {
                        return 'rotate(0)';
                    }
                });
            }

            //设置连接线的坐标,使用椭圆弧路径段双向编码
            function linkArc(d) {
                //var dx = d.target.x - d.source.x,
                // dy = d.target.y - d.source.y,
                // dr = Math.sqrt(dx * dx + dy * dy);
                //return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
                //打点path格式是：Msource.x,source.yArr00,1target.x,target.y  

                return 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y
            }
            //设置圆圈和文字的坐标
            function transform1(d) {
                return "translate(" + d.x + "," + d.y + ")";
            }
            function transform2(d) {
                return "translate(" + (d.x) + "," + d.y + ")";
            }
        }

        ///初始化下拉选择
        function initSelector()
        {
            $.ajax({
                async: false,
                type: "POST",
                url: "DSTreeModels/GetModSelectJson",//注意路径
                data: {},
                dataType: "json",
                success: function (data) {
                    $.each(data, function (index, item) {
                        //$("#ModSelector").append("<option value='" + data[index].ModGUID + "'>" + data[index].ModName + "</option>");
                        $("#ModulSelect").append("<li><a href=\"#\" onclick=\"javascript:chgModul('" + data[index].ModGUID + "','" + data[index].ModName + "')\">" + data[index].ModName + "</a></li>");
                    });
                    if (data.length > 0) {
                        //chgModul(data[0].ModGUID, data[0].ModName);
                    }
                },
                error: function (data) {
                    alert("模型尚未生成！");
                }
            })
        }

        //切换模型
        function chgModul(ModGUID, ModName) {
            MyModGUID = ModGUID;
            MyModName = ModName;
            if (MyType == "Tree") {
                initTable(ModGUID, ModName);
            } else {
                $("#DivDSTree").empty();
                initGraphic(ModGUID,ModName);
            }
            
        }

        ///初始化树
        function initTable(ModGUID, ModName)
        {
            $.ajax({
                async: false,
                type: "POST",
                url: "DSTrees/GetDstreeJson",//注意路径
                data: { ModGUID: ModGUID },
                dataType: "json",
                success: function (data) {
                    $("#DivDSTree").empty();
                    $("#DivDSTree").append("<ul id='DSTree' class='ztree' style='margin-top:0; width:100%; height:auto;'></ul>");
                    zNodes = data;
                    $.fn.zTree.init($("#DSTree"), setting, zNodes);
                    $("#ModulSelectShow").html(ModName);
                },
                error: function (data) {
                    alert("模型尚未生成！");
                }
            });
            
        }

    </script>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-7 " style="height:600px;overflow-x:scroll">
                <div class="panel-default ">
                    <div class="panel-heading row" style="height:45px">
                        <div class="col-md-8" style="font-size:larger;font-weight:800">
                            <span class="glyphicon glyphicon-th-large" aria-hidden="true"></span>
                            决策树
                        </div>
                        <div class="col-md-4">
                            <div class="btn-group pull-right btn-group-sm">
                                <button id="ModulSelectShow" type="button" class="btn" style="width:150px;background-color:rgb(145,221,222)">Choose Model</button>
                                <button type="button" class="btn dropdown-toggle" style="background-color:rgb(145,221,222)" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <span class="caret"></span>
                                    <span class="sr-only">Toggle Dropdown</span>
                                </button>
                                <ul id="ModulSelect" class="dropdown-menu">
                                    
                                </ul>
                            </div>
                        </div>
                        @*<div class="col-md-2">
                            <div class="btn-group pull-right" role="group" aria-label="...">
                                <button type="button" class="btn btn-default" onclick="SettingChange('Tree')"><span class="glyphicon glyphicon-align-left" aria-hidden="true"></span></button>
                                <button type="button" class="btn btn-default" onclick="SettingChange('picture')"><span class="glyphicon glyphicon-picture" aria-hidden="true"></span></button>
                                
                            </div>
                        </div>*@
                    </div>
                    
                    <div id="DivDSTree" class="panel-body">
                        
                    </div>
                </div>
            </div>
            @*<div class="col-md-2">
                <select id="ModSelector" class="selectpicker" data-style="btn-primary"></select>
            </div>
            <div class="col-md-2">
                <label class="radio-inline">
                    <input type="radio" name="DisplayType" id="TreeDisPlay" value="Tree" checked ="checked"> 树形展示
                </label>
                <label class="radio-inline">
                    <input type="radio" name="DisplayType" id="GraphicalDisPlay" value="Graphic"> 图形展示
                </label>
            </div>*@
            <div class="col-md-5"style="height:300px">
                <div class="panel-default">
                    <div class="panel-heading" style="height:45px;font-size:larger;font-weight:800">覆盖率</div>
                    <div id="DivCoverRat" class="panel-body">
                        <div id='pie'>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-5"style="height:250px">
                <div class="panel-default">
                    <div class="panel-heading" style="height:45px;font-size:larger;font-weight:800">属性贡献度</div>
                    <div id="AttrContribution" class="panel-body">
                        <div id='Gram'>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
   
</body>
</html>
