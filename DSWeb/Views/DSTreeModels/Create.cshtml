@model DSWeb.Models.DSTreeModel
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>新增</title>
    <script>
        var stepID = 1;
        var isFile = 0;
        $(function () {
            $("#ModFile").hide();
            var oButtonInit = new ButtonInit();
            oButtonInit.Init();
            initFileInput("FileData", "DSTreeModels/UpLoader")
            divShowHide();

        });
        ///显示隐藏文件上传控件
        function fileShowHide()
        {
            if ($("input[name='IsFileDataSource']:checked").val() == 1) {
                $("#ModFile").show(300);
            }
            else {
                $("#ModFile").hide(300);
            }
        }

        ///显示隐藏步骤div
        function divShowHide() {
            if (stepID == 1) {
                $("#ModMain").show(500);
                $("#ModDB").hide(500);
                $("#ModCycle").hide();
                $("#ModFactor").hide(500);
                $("#btnTestDb").hide();
                $("#preStep").hide();
                $("#nextStep").show();
                $("#save").hide();
                fileShowHide();
            }
            else {
                if (isFile == 1) {
                    $("#ModMain").hide(500);
                    $("#ModDB").hide();
                    $("#ModCycle").hide();
                    $("#ModFactor").show(500);
                    $("#btnTestDb").hide();
                    $("#preStep").show();
                    $("#nextStep").hide();
                    $("#save").show();
                }
                else
                {
                    switch (stepID) {
                        case 2:
                            $("#ModMain").hide(500);
                            $("#ModDB").show(500);
                            $("#ModCycle").hide(500);
                            $("#ModFactor").hide();
                            $("#btnTestDb").show();
                            $("#preStep").show();
                            $("#nextStep").show();
                            $("#save").hide();
                            break;
                        case 3:
                            $("#ModMain").hide();
                            $("#ModDB").hide(500);
                            $("#ModCycle").show(500);
                            $("#ModFactor").hide(500);
                            $("#btnTestDb").hide();
                            $("#preStep").show();
                            $("#nextStep").show();
                            $("#save").hide();
                            break;
                        case 4:
                            $("#ModMain").hide();
                            $("#ModDB").hide();
                            $("#ModCycle").hide(500);
                            $("#ModFactor").show(500);
                            $("#btnTestDb").hide();
                            $("#preStep").show();
                            $("#nextStep").hide();
                            $("#save").show();
                            break;
                    }
                }
            }
        }

        //初始化fileinput控件（第一次初始化）
        function initFileInput(ctrlName, uploadUrl) {
            var control = $('#' + ctrlName);
            control.fileinput({
                language: 'zh', //设置语言
                uploadAsync: true,
                enctype: 'multipart/form-data',
                uploadUrl: uploadUrl, //上传的地址
                allowedFileExtensions: ['csv', 'xlsx', 'xls'],//接收的文件后缀
                showUpload: true, //是否显示上传按钮
                showCaption: true,//是否显示标题
                showPreview: false,
                dropZoneEnabled: false,
                maxFileCount: 1,
                dropZoneTitle: "拖拽文件到这里 &hellip;",
                browseClass: "btn btn-primary", //按钮样式
            });
        }

        var ButtonInit = function () {
            var oInit = new Object();

            oInit.Init = function () {
                $("#btnTestDb").click(function () {
                    var Server = $("#ModServer").val();
                    var DataBase = $("#ModDataBase").val();
                    var Uid = $("#ModUid").val();
                    var PassWord = $("#ModPassword").val();
                    if (Server == "") {
                        alert("请填写服务器！");
                        return;
                    }
                    if (DataBase == "") {
                        alert("请填写数据库！");
                        return;
                    }
                    if (Uid == "") {
                        alert("请填写登录名！");
                        return;
                    }
                    $.ajax({
                        type: "post",
                        url: "/DSTreeModels/CheckDbString",
                        data: { Server: Server, DataBase: DataBase, Uid: Uid, PassWord: PassWord },
                        success: function (data) {
                            if (data == "success") {
                                alert("数据库连接验证成功！");
                            }
                            if (data == "failure") {
                                alert("数据库连接验证失败！");
                            }
                        },
                        error: function () {
                            alert("数据库连接验证失败！");
                        },
                        complete: function () {

                        }

                    });
                });
                $("#preStep").click(function () {
                    stepID--;
                    divShowHide();
                });
                $("#nextStep").click(function () {
                    if (stepID == 1) {
                        isFile = $("input[name='IsFileDataSource']:checked").val();
                    }
                    stepID++;
                    divShowHide();
                });
                $("input[name='IsFileDataSource']").change(function () {
                    fileShowHide();
                });
            }
            return oInit;
        };
    </script>
</head>
<body>
    <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal"
                aria-hidden="true">
            ×
        </button>
        <h3>新增模型</h3>
    </div>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="modal-body">
            <div id="ModMain" class="form-horizontal">
                <fieldset>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModName, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-7">
                            @Html.EditorFor(model => model.ModName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.IsFileDataSource, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-3">
                            @Html.RadioButtonFor(model => model.IsFileDataSource, 1)是
                            @Html.RadioButtonFor(model => model.IsFileDataSource, 0, htmlAttributes: new { @checked = "true" })否
                            @Html.ValidationMessageFor(model => model.IsFileDataSource, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div id="ModFile" class="form-group text-center">
                        <div class="col-md-3 text-right"><label class="control-label">上传文件</label></div>
                        <div class="col-md-5" style="padding-bottom:20px;text-align:center">
                            <input id="FileData" type="file" />
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModRemark, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-lg-7">
                            @Html.TextAreaFor(model => model.ModRemark, new { @class = "form-control", @rows = "6" })
                            @Html.ValidationMessageFor(model => model.ModRemark, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </fieldset>
            </div>
            <div id="ModDB" class="form-horizontal" hidden="hidden">
                <fieldset>
                    <legend>设置数据源</legend>
                </fieldset>
            </div>
            <div id="ModCycle" class="form-horizontal" hidden="hidden">
                <fieldset>
                    <legend>设置生成周期</legend>
                </fieldset>
            </div>
            <div id="ModFactor" class="form-horizontal" hidden="hidden">
                <fieldset>
                    <legend>选择结果属性</legend>
                </fieldset>
            </div>
            <div class="form-horizontal">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10 text-center">
                        <input id="btnTestDb" type="button" value="测试数据库连接" class="btn btn-default" />
                        <input id="preStep" type="button" value="上一步" class="btn btn-default" />
                        <input id="nextStep" type="button" value="下一步" class="btn btn-default" />
                        <input id="save" type="submit" value="保存" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </div>
    }
    @*@using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                <fieldset>
                    <legend>新增模型</legend>
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModName, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ModName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModCycleType, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModCycleType, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModCycleType, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.ModCycleWD, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModCycleWD, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModCycleWD, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.ModCycleDate, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModCycleDate, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModCycleDate, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </fieldset>
                <fieldset>
                    <legend>配置数据源</legend>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModServer, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModServer, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModServer, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.ModDataBase, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModDataBase, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModDataBase, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModUid, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModUid, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ModUid, "", new { @class = "text-danger" })
                        </div>
                        @Html.LabelFor(model => model.ModPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-sm-4">
                            @Html.EditorFor(model => model.ModPassword, new { htmlAttributes = new { @class = "form-control", @type = "password" } })
                            @Html.ValidationMessageFor(model => model.ModPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.ModDataSource, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-lg-10">
                            @Html.TextAreaFor(model => model.ModDataSource, new { @class = "form-control", @rows = "4" })
                            @Html.ValidationMessageFor(model => model.ModDataSource, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </fieldset>
                <div class="form-group">
                    @Html.LabelFor(model => model.ModRemark, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-lg-10">
                        @Html.TextAreaFor(model => model.ModRemark, new { @class = "form-control", @rows = "4" })
                        @Html.ValidationMessageFor(model => model.ModRemark, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-lg-10">

                        <input id="FileData" type="file" />
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="保存" class="btn btn-default" />
                        <input id="btnTestDb" type="button" value="测试数据库连接" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }*@
</body>
</html>
